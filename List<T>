// List<T> //
- элементы можно добавлять или удалять динамически
// Все элементы обобщённого класса List<T> должны принадлежать к одному типу T

// Свойства и методы
- Capacity - возвращает число элементов, которое список может вместить, прежде чем появится необходимость изменить размер
- Clear() - Удаляет все элементы их списка
- TrimExcess() - устанавливает возможность для подсчёта списка (полезно для сокращения затрат памяти)
- AddRange(IEnumerable coll) - Добавляет в конец списка элементы коллекции (coll) с элементами того же типа, что и List<T>
IEnumerable - интерфейс коллекции, который поддерживает простые итерации в определённом диапазоне.
- Remove(T t) - удаляет элемент t из списка
- RemoveRange(int index, int count) - удаляет определённое количество элементов из списка, начиная с определённой позиции
- Contains(T t) - возвращает true, когда элемент (t) представлен в списке
- IndexOf(T t) - возвращает индекс первого появления элемента в списке
- Reverse() - изменяет порядок элементов в списке
- ToArray() - создаёт массив из списка
- Count - возвращает несколько элементов в списке
- Item[int i] - восстанавливает или устанавливает значение в списке с индексом (i).
Item (или индексатор) не требуется при получении доступа к элементу.
Достаточно использовать квадратные скобки и значение индекса
- Add(T t) - добавляет элемент T в конец списка
- RemoveAt(int index) - удаляет из списка элемент в определённой позиции (index)
- Sort() - сортирует список

List<int> li = new List<int>();
li.Add(59);
..
li.RemoveAt(1);

Console.Write("\nList: ");
for (int x = 0; x < li.Count; x++)
  Console.Write(li[x] + " ");
li.Sort();
Console.Write("\nSorted: ");
for (int x = 0; x < li.Count; x++)
  Console.Write(li[x] + " ");
