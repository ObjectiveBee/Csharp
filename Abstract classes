// Абстрактные классы //
// Абстрактный класс предназначен быть базовым классом других классов. Он служит шаблоном
// если нет необходимости оперделять метод в базовом классе, его можно задать с помощью ключевого слова abstract
// нельзя создать объекты класса, содержащие абстрактные методы, вот почему сам класс должен быть абстрактным.
abstract class Shape()
{
	public abstract void Draw();
}
// Объявление абстрактных методов разрешено только в абстрактных классах
// Члены, обозначенные, как абстрактные, или включённые в абстрактный класс,
// должны быть реализованы классами, производными от абстрактного класса
abstract class Shape
{
	public abstract void Draw();
}
class Circle : Shape
{
	public override void Draw()
	{
		Console.WriteLine("Circle Draw");
	}
}
class Rectangualar : Shape
{
	public override void Draw()
	{
		Console.WriteLine("Rect Draw");
	}
}
static void Main(string[] args)
{
	Shape c = new Circle();
	c.Draw();
	// Outputs "Circle Draw"
}

// Особенности абстрактных классов //
- абстрактный класс не может быть инстанцирован;
- абстрактный класс может содержать абстрактные методы и элементы доступа;
- Не абстрактный класс, производный от абстрактного класса, 
должен включать действительные реализации всех наследованных абстрактных методов и элементов доступа
// Нельзя модифицировать абстрактный класс модификатором sealed, потому что эти два модификатора имеют противоположные значения.
