// Class //
class BankAccount
{
	// variables, methods and etc.
}
// A class defines a data type for objects, but is not an object itself.
// Создание объекта называется инстанциацией (создание экземпляра класса)
// Характеристики объекта называются свойствами.

/**************************************************************************************************/

// Оператор new создаёт объект и возвращает ссылку на его местоположение: //
class Person
{
	int age;
	string name;
	public void SayHi()
	{
		Console.WriteLine("Hi");
	}
}
static void Main(string[] args)
{
	Person p1 = new Person();
	p1.SayHi();
}

/*****************************************************************************************************/

// Модификаторы доступа //
public // может быть получен доступ извне класса, а также из любого места в рамках класса объекта.
private
protected
// Если не определён модификатор д., то по умолчанию будет установлен м. private.

/**********************************************************************************************************/

// Инкапсуляция //
class BankAccount
{
	private double balance = 0;
	public void Deposit(double b)
	{
		balance += n;
	}
	public void WithDraw(double n)
	{
		balance -= n;
	}
	public double GetBalance()
	{
		return balance;
	}
}
// Преимущества инкапсуляции
- Управление способом доступа и модификации данных
- Код становится более гибким и лёгким для изменения с новыми требованиями
- Изменение одной части кода не влияет на другие части кода

/*******************************************************************************************************************/

// Конструкторы //
class Person
{
	private int age;
	private string name;
	public Person(string nm)
	{
		name = nm;
	}
	public string getName()
	{
		return name;
	}
}
static void Main(string[] args)
{
	Person p = new Person("David");
	Console.WriteLine(p.getName());
}

/********************************************************************************************************************/

// Деструкторы //
// автоматически вызываются при удалении, или уничтожении объекта
// Атрибуты:
- Класс может иметь только один деструктор
- Деструкторы не могут быть вызваны. Они вызываются автоматически.
- Деструктор не принимает модификаторы и не имеет параметров
- Деструктор имеет имя, такое же, как и у класса, с символом тильды(~) в префиксе

class Dog
{
	public Dog()
	{
		Console.WriteLine("Constructor");
	}
	~Dog()
	{
		Console.WriteLine("Destructor");
	}
}
static void Main(string[] args)
{
	Dog d = new Dog();
}

// Принцип работы
/*
1. Программа запускается, создаёт объект, который вызывает конструктор
2. В конце программы конструктор удаляетс, а деструктор вызывается, когда выполнение программы завершено.
// Это может быть полезно, например, если класс работает с памятью, или с файлами.
// Констурктор будет инициализировать и открывать файлы. Затем, при завершении программы, деструктор закроет файлы.

/********************************************************************************************************************/

