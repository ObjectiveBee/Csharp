// SortedList<K, V>
// Отсортированный список - это коллекция пар ключ-значение, отсортированных по значению ключа.
// Ключ может быть использован для доступа к соответсвующему значению в отсортированном списке.
// все элементы "ключ-значение" должны принадлежать к одному типу K/V.

// Использование идентичных ключей не допускается

// Свойства //
- Count - возвращает количество пар ключ-значение в отсортированном списке
- Item[K key] - восстанавливает значение, привязанное к определённому ключу в отсортированном списке
Item (или индексатор) не требуется при получении доступа к элементу.
Достаточно использовать квадратные скобки [] и значение индекса.
- Keys - возвращает отсортированную, индексированную коллекцию, содержащую только ключи в отсортированном виде.
- Values - аналогично предыдущему, только со значениями

// Методы //
- Add(K key, V value) - добавляет пару ключ-значение в отсортированный список
- Remove(K key) - удаляет пару ключ-значение с определённым ключом из отсортированного списка.
- Clear() - удаляет все элементы из отсортированного списка
- ContainsKey(K key) - возвращает true, если ключ представлен в отсортированном списке.
- ContainsValue(V value) - аналогично, только со значением
- IndexOfKey(K key) - возвращает индекс определённого ключа в отсортированном списке.
- IndexOfValue(V value)

SortedList<string, int> sl = new SortedList<string, int>();
sl.Add("Solo", 59);
sl.Add("A", 95);
sl.Add("Learn", 72);
sl.Remove("A");
Console.WriteLine("Sorted List: ");
foreach (string s in sl.Keys)
  Console.WriteLine(s + ": " + sl[s]); // Learn: 72 Solo: 59
Console.WriteLine("\nCount: " + sl.Count); // 2
