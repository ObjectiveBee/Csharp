// this // #this
// используется внутри класса и ссылается на текущий экземпляр класса, т.е. ссылается на текущий объект
class Person
{
	private string name;
	public Person(string name)
	{
		this.name = name; // this.name - элемент класса, name - параметр конструктора
	}
}

// Таже this служит для передачи текущего экземпляра методу в качестве параметра: ShowPersonInfo(this);

/***************************************************************************************************/

// Модификатор readonly //
// защищает элементы класса от модификации после построения
// объявленное поле с м. readonly может быть модифицировано только при его объявлении, или внутри конструктора.
class Person
{
	private readonly string name = "John";
	public Person(string name)
	{
		this.name = name;
	}
}

// Отличие от const
-  поле для чтения м. б. объявлено без инициализации
readonly string name; // OK
const double Pi; // Error
- значение поля readonly м.б. изменено в конструкторе
- может быть присвоено значение, являющееся результатом вычслений, а константе - нет
readonly double a = Math.Sin(60);

/************************************************************************************************************************/

// индексаторы //
// элементы доступа индексатора требуют наличия индекса
// можно использовать элементы get и set для определения индексатора
// индексатор возвращают и устанавливают определённое значение объекта.
// Индексатор определяется с помощью кл. слова this
class Clients
{
	private string[] names = new string[10];
	
	public string this[int index]
	{
		get
		{
			return names[index];
		}
		set
		{
			names[index] = value;
		}
	}
}
static void Main(string[] args)
{
	Clients c = new Clients();
	c[0] = "Dave";
	c[1] = "Bob";
	
	Console.WriteLine(c[1]);
}
